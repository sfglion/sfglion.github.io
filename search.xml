<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Simulink,Coppeliasim动力学</title>
    <url>/2021/08/23/Simulink-Coppeliasim%E5%8A%A8%E5%8A%9B%E5%AD%A6/</url>
    <content><![CDATA[<h2 id="Coppeliasim部分"><a href="#Coppeliasim部分" class="headerlink" title="Coppeliasim部分"></a>Coppeliasim部分</h2><ul>
<li>动力学的计算在2ms的时候感觉大概可以达成实时性，但是对于控制器来说可能2ms的速度不太够，最后发现simulink自带的动力学计算也是可以用的(虽然cpu跑到了100%，但差不多是有实时性的，应该只是电脑菜。)</li>
<li>在做包含动力学的时候用m函数+blocking方式会很慢，github simulink自带的共享内存的方式可以用，但是不确定是不是blocking方式的。</li>
<li>只做接收数据的显示的话应该会很快，</li>
<li><strong>应该可以用s-function写成blocking方式的共享内存的方式,不行的话单写成s-function加127.0.0.1的方式应该也可以，后面试一下</strong></li>
<li>也可以加上试下用上simulink代码自动生成来提升计算的速度倒是</li>
</ul>
<h2 id="Matlab"><a href="#Matlab" class="headerlink" title="Matlab"></a>Matlab</h2><ul>
<li>M文件结合着教程可以ip连接和共享内存连接，并且自带的共享内存比github的simulink的共享内存方式cpu占用低。simulink的共享内存运行起来就跑到100%。</li>
<li>用最基础的滑模控了一下效果还挺好的 (阶跃响应下)，而且好像没有了用重力补偿PD情况下的耦合现象？(比如只动4关节，然后2关节跟着会动一下才能稳定，SMC下只会动4关节，而且在仿真中很稳定)</li>
<li>这样的话，就可以用matlab计算动力学以及控制器部分、Coppeliasim只用来进行显示的部分。</li>
</ul>
]]></content>
      <categories>
        <category>仿真</category>
      </categories>
  </entry>
  <entry>
    <title>Github pages+Hexo+Next</title>
    <url>/2021/08/23/Github%20pages+Hexo+Next/</url>
    <content><![CDATA[<h2 id="Github部分"><a href="#Github部分" class="headerlink" title="Github部分"></a>Github部分</h2><p>添加分类、标签、页面</p>
<ul>
<li>添加SSH Key <code>ssh-keygen -t rsa -C &quot;XX@XX.com&quot;</code><h2 id="Hexo部分"><a href="#Hexo部分" class="headerlink" title="Hexo部分"></a>Hexo部分</h2></li>
<li>安装node.js</li>
<li>安装hexo <code>npm install -g hexo-cli</code></li>
<li>部署包<code>npm install hexo-deployer-git --save</code></li>
<li>blog目录右键git bash <code>hexo init</code>初始化目录</li>
<li><code>hexo g</code>生成，<code>hexo s</code>本地服务端, <code>localhost：4000</code>即可访问本地端, <code>hexo d</code>部署</li>
<li>_config.yml更改部署</li>
<li>搜索控件<code>hexo-generator-searchdb </code><h2 id="Next部分"><a href="#Next部分" class="headerlink" title="Next部分"></a>Next部分</h2></li>
<li><code>git clone https://github.com/next-theme/hexo-theme-next themes/next</code> 或者<code>npm install hexo-theme-next</code></li>
</ul>
]]></content>
      <categories>
        <category>杂</category>
      </categories>
  </entry>
  <entry>
    <title>人机混合</title>
    <url>/2021/08/30/%E4%BA%BA%E6%9C%BA%E6%B7%B7%E5%90%88%E6%99%BA%E8%83%BD/</url>
    <content><![CDATA[<ul>
<li>$P(B_i)$先验概率，$P(B_i|A)$后验概率，后验是先验获得了信息后的修正</li>
<li>混合模型，不光有观测变量，还有隐变量，观测变量$x_i$, 隐变量$z_i$</li>
<li>GMM,Matalb和Python也都有现成的GMM函数，对于模型个数选择，可以用PCA，主成分分析来确定(从matlab的文档里看到的)还有Information criteria 例如AIC，BIC，或者Calinski-Harabasz准则啥的</li>
<li>计算矩阵<a href="http://www.matrixcalculus.org/">http://www.matrixcalculus.org/</a></li>
</ul>
]]></content>
      <categories>
        <category>人机混合智能</category>
      </categories>
  </entry>
  <entry>
    <title>Matlab日常</title>
    <url>/2021/08/25/Matlab%E6%97%A5%E5%B8%B8/</url>
    <content><![CDATA[<ul>
<li><p>function 后面加上%# codegen用于静态代码分析</p>
</li>
<li><p>persistent变量</p>
</li>
<li><p>Functions supported for C/C++ Code Generation</p>
</li>
<li><p>不支持的内建函数，可以采用extrinsic</p>
</li>
<li><p>多种不同信号，或者多种信号有层级混杂的时候bus感觉很好用</p>
</li>
<li><p>原子子系统能够单独设置采样时间</p>
</li>
<li><p>mex ttt.c extApi.c extApiPlatform.c shared_memory.c加上文档写的255和nonmatlab啥的</p>
</li>
</ul>
]]></content>
      <categories>
        <category>仿真</category>
      </categories>
  </entry>
</search>
